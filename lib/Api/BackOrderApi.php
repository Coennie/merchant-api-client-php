<?php
/**
 * BackOrderApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ChannelEngine API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * BackOrderApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BackOrderApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return BackOrderApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation backOrderCreate
     *
     * Merchant: Create Backorder
     *
     * @param \Swagger\Client\Model\BackOrder $back_order The Backorder to create (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ApiResponse
     */
    public function backOrderCreate($back_order)
    {
        list($response) = $this->backOrderCreateWithHttpInfo($back_order);
        return $response;
    }

    /**
     * Operation backOrderCreateWithHttpInfo
     *
     * Merchant: Create Backorder
     *
     * @param \Swagger\Client\Model\BackOrder $back_order The Backorder to create (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function backOrderCreateWithHttpInfo($back_order)
    {
        // verify the required parameter 'back_order' is set
        if ($back_order === null) {
            throw new \InvalidArgumentException('Missing the required parameter $back_order when calling backOrderCreate');
        }
        // parse inputs
        $resourcePath = "/v2/backorders";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($back_order)) {
            $_tempBody = $back_order;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ApiResponse',
                '/v2/backorders'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ApiResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ApiResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation backOrderGet
     *
     * Merchant: Get Backorder
     *
     * @param string $merchant_reference The unique backorder reference supplied by the merchant (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SingleOfBackOrder
     */
    public function backOrderGet($merchant_reference)
    {
        list($response) = $this->backOrderGetWithHttpInfo($merchant_reference);
        return $response;
    }

    /**
     * Operation backOrderGetWithHttpInfo
     *
     * Merchant: Get Backorder
     *
     * @param string $merchant_reference The unique backorder reference supplied by the merchant (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SingleOfBackOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function backOrderGetWithHttpInfo($merchant_reference)
    {
        // verify the required parameter 'merchant_reference' is set
        if ($merchant_reference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $merchant_reference when calling backOrderGet');
        }
        // parse inputs
        $resourcePath = "/v2/backorders/{merchantReference}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($merchant_reference !== null) {
            $resourcePath = str_replace(
                "{" . "merchantReference" . "}",
                $this->apiClient->getSerializer()->toPathValue($merchant_reference),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SingleOfBackOrder',
                '/v2/backorders/{merchantReference}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SingleOfBackOrder', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SingleOfBackOrder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation backOrderIndex
     *
     * Get Backorders
     *
     * @param \DateTime $created_since  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CollectionOfBackOrder
     */
    public function backOrderIndex($created_since)
    {
        list($response) = $this->backOrderIndexWithHttpInfo($created_since);
        return $response;
    }

    /**
     * Operation backOrderIndexWithHttpInfo
     *
     * Get Backorders
     *
     * @param \DateTime $created_since  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CollectionOfBackOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function backOrderIndexWithHttpInfo($created_since)
    {
        // verify the required parameter 'created_since' is set
        if ($created_since === null) {
            throw new \InvalidArgumentException('Missing the required parameter $created_since when calling backOrderIndex');
        }
        // parse inputs
        $resourcePath = "/v2/backorders";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($created_since !== null) {
            $queryParams['createdSince'] = $this->apiClient->getSerializer()->toQueryValue($created_since);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CollectionOfBackOrder',
                '/v2/backorders'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CollectionOfBackOrder', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CollectionOfBackOrder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
