<?php
/**
 * OrderLineViewModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * OrderLineViewModel Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrderLineViewModel implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'merchant_reference' => 'string',
        'channel_product_no' => 'string',
        'quantity' => 'int',
        'vat_rate' => 'double',
        'unit_price_incl_vat' => 'double',
        'unit_vat' => 'double',
        'original_unit_price_incl_vat' => 'double',
        'original_unit_vat' => 'double',
        'fee_fixed' => 'double',
        'fee_rate' => 'double',
        'delivery_time_indication' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'merchant_reference' => 'MerchantReference',
        'channel_product_no' => 'ChannelProductNo',
        'quantity' => 'Quantity',
        'vat_rate' => 'VatRate',
        'unit_price_incl_vat' => 'UnitPriceInclVat',
        'unit_vat' => 'UnitVat',
        'original_unit_price_incl_vat' => 'OriginalUnitPriceInclVat',
        'original_unit_vat' => 'OriginalUnitVat',
        'fee_fixed' => 'FeeFixed',
        'fee_rate' => 'FeeRate',
        'delivery_time_indication' => 'DeliveryTimeIndication'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'merchant_reference' => 'setMerchantReference',
        'channel_product_no' => 'setChannelProductNo',
        'quantity' => 'setQuantity',
        'vat_rate' => 'setVatRate',
        'unit_price_incl_vat' => 'setUnitPriceInclVat',
        'unit_vat' => 'setUnitVat',
        'original_unit_price_incl_vat' => 'setOriginalUnitPriceInclVat',
        'original_unit_vat' => 'setOriginalUnitVat',
        'fee_fixed' => 'setFeeFixed',
        'fee_rate' => 'setFeeRate',
        'delivery_time_indication' => 'setDeliveryTimeIndication'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'merchant_reference' => 'getMerchantReference',
        'channel_product_no' => 'getChannelProductNo',
        'quantity' => 'getQuantity',
        'vat_rate' => 'getVatRate',
        'unit_price_incl_vat' => 'getUnitPriceInclVat',
        'unit_vat' => 'getUnitVat',
        'original_unit_price_incl_vat' => 'getOriginalUnitPriceInclVat',
        'original_unit_vat' => 'getOriginalUnitVat',
        'fee_fixed' => 'getFeeFixed',
        'fee_rate' => 'getFeeRate',
        'delivery_time_indication' => 'getDeliveryTimeIndication'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $merchant_reference 
      * @var string
      */
    protected $merchant_reference;
    
    /**
      * $channel_product_no 
      * @var string
      */
    protected $channel_product_no;
    
    /**
      * $quantity 
      * @var int
      */
    protected $quantity;
    
    /**
      * $vat_rate 
      * @var double
      */
    protected $vat_rate;
    
    /**
      * $unit_price_incl_vat The value of a single unit of the ordered product including VAT\r\n            (in the tenant's base currency calculated using the exchange rate at the time of ordering).
      * @var double
      */
    protected $unit_price_incl_vat;
    
    /**
      * $unit_vat The total amount of VAT charged over the value of a single unit of the ordered product\r\n            (in the tenant's base currency calculated using the exchange rate at the time of ordering).
      * @var double
      */
    protected $unit_vat;
    
    /**
      * $original_unit_price_incl_vat The value of a single unit of the ordered product including VAT\r\n            (in the currency in which the order was paid for).
      * @var double
      */
    protected $original_unit_price_incl_vat;
    
    /**
      * $original_unit_vat The total amount of VAT charged over the value of a single unit of the ordered product\r\n            (in the currency in which the order was paid for).
      * @var double
      */
    protected $original_unit_vat;
    
    /**
      * $fee_fixed 
      * @var double
      */
    protected $fee_fixed;
    
    /**
      * $fee_rate 
      * @var double
      */
    protected $fee_rate;
    
    /**
      * $delivery_time_indication 
      * @var string
      */
    protected $delivery_time_indication;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->merchant_reference = $data["merchant_reference"];
            $this->channel_product_no = $data["channel_product_no"];
            $this->quantity = $data["quantity"];
            $this->vat_rate = $data["vat_rate"];
            $this->unit_price_incl_vat = $data["unit_price_incl_vat"];
            $this->unit_vat = $data["unit_vat"];
            $this->original_unit_price_incl_vat = $data["original_unit_price_incl_vat"];
            $this->original_unit_vat = $data["original_unit_vat"];
            $this->fee_fixed = $data["fee_fixed"];
            $this->fee_rate = $data["fee_rate"];
            $this->delivery_time_indication = $data["delivery_time_indication"];
        }
    }
    
    /**
     * Gets merchant_reference
     * @return string
     */
    public function getMerchantReference()
    {
        return $this->merchant_reference;
    }
  
    /**
     * Sets merchant_reference
     * @param string $merchant_reference 
     * @return $this
     */
    public function setMerchantReference($merchant_reference)
    {
        
        $this->merchant_reference = $merchant_reference;
        return $this;
    }
    
    /**
     * Gets channel_product_no
     * @return string
     */
    public function getChannelProductNo()
    {
        return $this->channel_product_no;
    }
  
    /**
     * Sets channel_product_no
     * @param string $channel_product_no 
     * @return $this
     */
    public function setChannelProductNo($channel_product_no)
    {
        
        $this->channel_product_no = $channel_product_no;
        return $this;
    }
    
    /**
     * Gets quantity
     * @return int
     */
    public function getQuantity()
    {
        return $this->quantity;
    }
  
    /**
     * Sets quantity
     * @param int $quantity 
     * @return $this
     */
    public function setQuantity($quantity)
    {
        
        $this->quantity = $quantity;
        return $this;
    }
    
    /**
     * Gets vat_rate
     * @return double
     */
    public function getVatRate()
    {
        return $this->vat_rate;
    }
  
    /**
     * Sets vat_rate
     * @param double $vat_rate 
     * @return $this
     */
    public function setVatRate($vat_rate)
    {
        
        $this->vat_rate = $vat_rate;
        return $this;
    }
    
    /**
     * Gets unit_price_incl_vat
     * @return double
     */
    public function getUnitPriceInclVat()
    {
        return $this->unit_price_incl_vat;
    }
  
    /**
     * Sets unit_price_incl_vat
     * @param double $unit_price_incl_vat The value of a single unit of the ordered product including VAT\r\n            (in the tenant's base currency calculated using the exchange rate at the time of ordering).
     * @return $this
     */
    public function setUnitPriceInclVat($unit_price_incl_vat)
    {
        
        $this->unit_price_incl_vat = $unit_price_incl_vat;
        return $this;
    }
    
    /**
     * Gets unit_vat
     * @return double
     */
    public function getUnitVat()
    {
        return $this->unit_vat;
    }
  
    /**
     * Sets unit_vat
     * @param double $unit_vat The total amount of VAT charged over the value of a single unit of the ordered product\r\n            (in the tenant's base currency calculated using the exchange rate at the time of ordering).
     * @return $this
     */
    public function setUnitVat($unit_vat)
    {
        
        $this->unit_vat = $unit_vat;
        return $this;
    }
    
    /**
     * Gets original_unit_price_incl_vat
     * @return double
     */
    public function getOriginalUnitPriceInclVat()
    {
        return $this->original_unit_price_incl_vat;
    }
  
    /**
     * Sets original_unit_price_incl_vat
     * @param double $original_unit_price_incl_vat The value of a single unit of the ordered product including VAT\r\n            (in the currency in which the order was paid for).
     * @return $this
     */
    public function setOriginalUnitPriceInclVat($original_unit_price_incl_vat)
    {
        
        $this->original_unit_price_incl_vat = $original_unit_price_incl_vat;
        return $this;
    }
    
    /**
     * Gets original_unit_vat
     * @return double
     */
    public function getOriginalUnitVat()
    {
        return $this->original_unit_vat;
    }
  
    /**
     * Sets original_unit_vat
     * @param double $original_unit_vat The total amount of VAT charged over the value of a single unit of the ordered product\r\n            (in the currency in which the order was paid for).
     * @return $this
     */
    public function setOriginalUnitVat($original_unit_vat)
    {
        
        $this->original_unit_vat = $original_unit_vat;
        return $this;
    }
    
    /**
     * Gets fee_fixed
     * @return double
     */
    public function getFeeFixed()
    {
        return $this->fee_fixed;
    }
  
    /**
     * Sets fee_fixed
     * @param double $fee_fixed 
     * @return $this
     */
    public function setFeeFixed($fee_fixed)
    {
        
        $this->fee_fixed = $fee_fixed;
        return $this;
    }
    
    /**
     * Gets fee_rate
     * @return double
     */
    public function getFeeRate()
    {
        return $this->fee_rate;
    }
  
    /**
     * Sets fee_rate
     * @param double $fee_rate 
     * @return $this
     */
    public function setFeeRate($fee_rate)
    {
        
        $this->fee_rate = $fee_rate;
        return $this;
    }
    
    /**
     * Gets delivery_time_indication
     * @return string
     */
    public function getDeliveryTimeIndication()
    {
        return $this->delivery_time_indication;
    }
  
    /**
     * Sets delivery_time_indication
     * @param string $delivery_time_indication 
     * @return $this
     */
    public function setDeliveryTimeIndication($delivery_time_indication)
    {
        
        $this->delivery_time_indication = $delivery_time_indication;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
