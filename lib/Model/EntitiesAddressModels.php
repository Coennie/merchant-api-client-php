<?php
/**
 * EntitiesAddressModels
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ChannelEngine API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * EntitiesAddressModels Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EntitiesAddressModels implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'EntitiesAddressModels';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'gender' => 'string',
        'company_name' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'street_name' => 'string',
        'house_nr' => 'string',
        'house_nr_addition' => 'string',
        'zip_code' => 'string',
        'city' => 'string',
        'region' => 'string',
        'country_iso' => 'string',
        'original' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'gender' => 'Gender',
        'company_name' => 'CompanyName',
        'first_name' => 'FirstName',
        'last_name' => 'LastName',
        'street_name' => 'StreetName',
        'house_nr' => 'HouseNr',
        'house_nr_addition' => 'HouseNrAddition',
        'zip_code' => 'ZipCode',
        'city' => 'City',
        'region' => 'Region',
        'country_iso' => 'CountryIso',
        'original' => 'Original'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'gender' => 'setGender',
        'company_name' => 'setCompanyName',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'street_name' => 'setStreetName',
        'house_nr' => 'setHouseNr',
        'house_nr_addition' => 'setHouseNrAddition',
        'zip_code' => 'setZipCode',
        'city' => 'setCity',
        'region' => 'setRegion',
        'country_iso' => 'setCountryIso',
        'original' => 'setOriginal'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'gender' => 'getGender',
        'company_name' => 'getCompanyName',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'street_name' => 'getStreetName',
        'house_nr' => 'getHouseNr',
        'house_nr_addition' => 'getHouseNrAddition',
        'zip_code' => 'getZipCode',
        'city' => 'getCity',
        'region' => 'getRegion',
        'country_iso' => 'getCountryIso',
        'original' => 'getOriginal'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const GENDER_MALE = 'MALE';
    const GENDER_FEMALE = 'FEMALE';
    const GENDER_NOT_APPLICABLE = 'NOT_APPLICABLE';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_MALE,
            self::GENDER_FEMALE,
            self::GENDER_NOT_APPLICABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['street_name'] = isset($data['street_name']) ? $data['street_name'] : null;
        $this->container['house_nr'] = isset($data['house_nr']) ? $data['house_nr'] : null;
        $this->container['house_nr_addition'] = isset($data['house_nr_addition']) ? $data['house_nr_addition'] : null;
        $this->container['zip_code'] = isset($data['zip_code']) ? $data['zip_code'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['country_iso'] = isset($data['country_iso']) ? $data['country_iso'] : null;
        $this->container['original'] = isset($data['original']) ? $data['original'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["MALE", "FEMALE", "NOT_APPLICABLE"];
        if (!in_array($this->container['gender'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'gender', must be one of 'MALE', 'FEMALE', 'NOT_APPLICABLE'.";
        }

        if (!is_null($this->container['house_nr']) && (strlen($this->container['house_nr']) > 50)) {
            $invalid_properties[] = "invalid value for 'house_nr', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['house_nr']) && (strlen($this->container['house_nr']) < 0)) {
            $invalid_properties[] = "invalid value for 'house_nr', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['house_nr_addition']) && (strlen($this->container['house_nr_addition']) > 50)) {
            $invalid_properties[] = "invalid value for 'house_nr_addition', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['house_nr_addition']) && (strlen($this->container['house_nr_addition']) < 0)) {
            $invalid_properties[] = "invalid value for 'house_nr_addition', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['region']) && (strlen($this->container['region']) > 50)) {
            $invalid_properties[] = "invalid value for 'region', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['region']) && (strlen($this->container['region']) < 0)) {
            $invalid_properties[] = "invalid value for 'region', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['country_iso']) && (strlen($this->container['country_iso']) > 2)) {
            $invalid_properties[] = "invalid value for 'country_iso', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['country_iso']) && (strlen($this->container['country_iso']) < 0)) {
            $invalid_properties[] = "invalid value for 'country_iso', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['original']) && (strlen($this->container['original']) > 256)) {
            $invalid_properties[] = "invalid value for 'original', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['original']) && (strlen($this->container['original']) < 0)) {
            $invalid_properties[] = "invalid value for 'original', the character length must be bigger than or equal to 0.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["MALE", "FEMALE", "NOT_APPLICABLE"];
        if (!in_array($this->container['gender'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['house_nr']) > 50) {
            return false;
        }
        if (strlen($this->container['house_nr']) < 0) {
            return false;
        }
        if (strlen($this->container['house_nr_addition']) > 50) {
            return false;
        }
        if (strlen($this->container['house_nr_addition']) < 0) {
            return false;
        }
        if (strlen($this->container['region']) > 50) {
            return false;
        }
        if (strlen($this->container['region']) < 0) {
            return false;
        }
        if (strlen($this->container['country_iso']) > 2) {
            return false;
        }
        if (strlen($this->container['country_iso']) < 0) {
            return false;
        }
        if (strlen($this->container['original']) > 256) {
            return false;
        }
        if (strlen($this->container['original']) < 0) {
            return false;
        }
        return true;
    }


    /**
     * Gets gender
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     * @param string $gender
     * @return $this
     */
    public function setGender($gender)
    {
        $allowed_values = array('MALE', 'FEMALE', 'NOT_APPLICABLE');
        if (!is_null($gender) && (!in_array($gender, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'gender', must be one of 'MALE', 'FEMALE', 'NOT_APPLICABLE'");
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets company_name
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     * @param string $company_name
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets street_name
     * @return string
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     * @param string $street_name
     * @return $this
     */
    public function setStreetName($street_name)
    {
        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets house_nr
     * @return string
     */
    public function getHouseNr()
    {
        return $this->container['house_nr'];
    }

    /**
     * Sets house_nr
     * @param string $house_nr
     * @return $this
     */
    public function setHouseNr($house_nr)
    {
        if (!is_null($house_nr) && (strlen($house_nr) > 50)) {
            throw new \InvalidArgumentException('invalid length for $house_nr when calling EntitiesAddressModels., must be smaller than or equal to 50.');
        }
        if (!is_null($house_nr) && (strlen($house_nr) < 0)) {
            throw new \InvalidArgumentException('invalid length for $house_nr when calling EntitiesAddressModels., must be bigger than or equal to 0.');
        }

        $this->container['house_nr'] = $house_nr;

        return $this;
    }

    /**
     * Gets house_nr_addition
     * @return string
     */
    public function getHouseNrAddition()
    {
        return $this->container['house_nr_addition'];
    }

    /**
     * Sets house_nr_addition
     * @param string $house_nr_addition
     * @return $this
     */
    public function setHouseNrAddition($house_nr_addition)
    {
        if (!is_null($house_nr_addition) && (strlen($house_nr_addition) > 50)) {
            throw new \InvalidArgumentException('invalid length for $house_nr_addition when calling EntitiesAddressModels., must be smaller than or equal to 50.');
        }
        if (!is_null($house_nr_addition) && (strlen($house_nr_addition) < 0)) {
            throw new \InvalidArgumentException('invalid length for $house_nr_addition when calling EntitiesAddressModels., must be bigger than or equal to 0.');
        }

        $this->container['house_nr_addition'] = $house_nr_addition;

        return $this;
    }

    /**
     * Gets zip_code
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     * @param string $zip_code
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets region
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     * @param string $region
     * @return $this
     */
    public function setRegion($region)
    {
        if (!is_null($region) && (strlen($region) > 50)) {
            throw new \InvalidArgumentException('invalid length for $region when calling EntitiesAddressModels., must be smaller than or equal to 50.');
        }
        if (!is_null($region) && (strlen($region) < 0)) {
            throw new \InvalidArgumentException('invalid length for $region when calling EntitiesAddressModels., must be bigger than or equal to 0.');
        }

        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets country_iso
     * @return string
     */
    public function getCountryIso()
    {
        return $this->container['country_iso'];
    }

    /**
     * Sets country_iso
     * @param string $country_iso
     * @return $this
     */
    public function setCountryIso($country_iso)
    {
        if (!is_null($country_iso) && (strlen($country_iso) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country_iso when calling EntitiesAddressModels., must be smaller than or equal to 2.');
        }
        if (!is_null($country_iso) && (strlen($country_iso) < 0)) {
            throw new \InvalidArgumentException('invalid length for $country_iso when calling EntitiesAddressModels., must be bigger than or equal to 0.');
        }

        $this->container['country_iso'] = $country_iso;

        return $this;
    }

    /**
     * Gets original
     * @return string
     */
    public function getOriginal()
    {
        return $this->container['original'];
    }

    /**
     * Sets original
     * @param string $original
     * @return $this
     */
    public function setOriginal($original)
    {
        if (!is_null($original) && (strlen($original) > 256)) {
            throw new \InvalidArgumentException('invalid length for $original when calling EntitiesAddressModels., must be smaller than or equal to 256.');
        }
        if (!is_null($original) && (strlen($original) < 0)) {
            throw new \InvalidArgumentException('invalid length for $original when calling EntitiesAddressModels., must be bigger than or equal to 0.');
        }

        $this->container['original'] = $original;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


