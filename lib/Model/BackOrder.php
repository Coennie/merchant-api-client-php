<?php
/**
 * BackOrder
 *
 * PHP version 5
 *
 * @category Class
 * @package  ChannelEngine\ApiClient
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ChannelEngine API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ChannelEngine\ApiClient\Model;

use \ArrayAccess;

/**
 * BackOrder Class Doc Comment
 *
 * @category    Class
 * @package     ChannelEngine\ApiClient
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BackOrder implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'BackOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'merchantBackorderReference' => 'string',
        'merchantOrderReference' => 'string',
        'channelOrderReference' => 'string',
        'lines' => '\ChannelEngine\ApiClient\Model\BackOrderLine[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'merchantBackorderReference' => 'MerchantBackorderReference',
        'merchantOrderReference' => 'MerchantOrderReference',
        'channelOrderReference' => 'ChannelOrderReference',
        'lines' => 'Lines'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'merchantBackorderReference' => 'setMerchantBackorderReference',
        'merchantOrderReference' => 'setMerchantOrderReference',
        'channelOrderReference' => 'setChannelOrderReference',
        'lines' => 'setLines'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'merchantBackorderReference' => 'getMerchantBackorderReference',
        'merchantOrderReference' => 'getMerchantOrderReference',
        'channelOrderReference' => 'getChannelOrderReference',
        'lines' => 'getLines'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchantBackorderReference'] = isset($data['merchantBackorderReference']) ? $data['merchantBackorderReference'] : null;
        $this->container['merchantOrderReference'] = isset($data['merchantOrderReference']) ? $data['merchantOrderReference'] : null;
        $this->container['channelOrderReference'] = isset($data['channelOrderReference']) ? $data['channelOrderReference'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['merchantBackorderReference'] === null) {
            $invalid_properties[] = "'merchantBackorderReference' can't be null";
        }
        if ((strlen($this->container['merchantBackorderReference']) > 50)) {
            $invalid_properties[] = "invalid value for 'merchantBackorderReference', the character length must be smaller than or equal to 50.";
        }

        if ((strlen($this->container['merchantBackorderReference']) < 0)) {
            $invalid_properties[] = "invalid value for 'merchantBackorderReference', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['merchantOrderReference'] === null) {
            $invalid_properties[] = "'merchantOrderReference' can't be null";
        }
        if ((strlen($this->container['merchantOrderReference']) > 50)) {
            $invalid_properties[] = "invalid value for 'merchantOrderReference', the character length must be smaller than or equal to 50.";
        }

        if ((strlen($this->container['merchantOrderReference']) < 0)) {
            $invalid_properties[] = "invalid value for 'merchantOrderReference', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['channelOrderReference']) && (strlen($this->container['channelOrderReference']) > 50)) {
            $invalid_properties[] = "invalid value for 'channelOrderReference', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['channelOrderReference']) && (strlen($this->container['channelOrderReference']) < 0)) {
            $invalid_properties[] = "invalid value for 'channelOrderReference', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['lines'] === null) {
            $invalid_properties[] = "'lines' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['merchantBackorderReference'] === null) {
            return false;
        }
        if (strlen($this->container['merchantBackorderReference']) > 50) {
            return false;
        }
        if (strlen($this->container['merchantBackorderReference']) < 0) {
            return false;
        }
        if ($this->container['merchantOrderReference'] === null) {
            return false;
        }
        if (strlen($this->container['merchantOrderReference']) > 50) {
            return false;
        }
        if (strlen($this->container['merchantOrderReference']) < 0) {
            return false;
        }
        if (strlen($this->container['channelOrderReference']) > 50) {
            return false;
        }
        if (strlen($this->container['channelOrderReference']) < 0) {
            return false;
        }
        if ($this->container['lines'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets merchantBackorderReference
     * @return string
     */
    public function getMerchantBackorderReference()
    {
        return $this->container['merchantBackorderReference'];
    }

    /**
     * Sets merchantBackorderReference
     * @param string $merchantBackorderReference
     * @return $this
     */
    public function setMerchantBackorderReference($merchantBackorderReference)
    {
        if ((strlen($merchantBackorderReference) > 50)) {
            throw new \InvalidArgumentException('invalid length for $merchantBackorderReference when calling BackOrder., must be smaller than or equal to 50.');
        }
        if ((strlen($merchantBackorderReference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $merchantBackorderReference when calling BackOrder., must be bigger than or equal to 0.');
        }

        $this->container['merchantBackorderReference'] = $merchantBackorderReference;

        return $this;
    }

    /**
     * Gets merchantOrderReference
     * @return string
     */
    public function getMerchantOrderReference()
    {
        return $this->container['merchantOrderReference'];
    }

    /**
     * Sets merchantOrderReference
     * @param string $merchantOrderReference
     * @return $this
     */
    public function setMerchantOrderReference($merchantOrderReference)
    {
        if ((strlen($merchantOrderReference) > 50)) {
            throw new \InvalidArgumentException('invalid length for $merchantOrderReference when calling BackOrder., must be smaller than or equal to 50.');
        }
        if ((strlen($merchantOrderReference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $merchantOrderReference when calling BackOrder., must be bigger than or equal to 0.');
        }

        $this->container['merchantOrderReference'] = $merchantOrderReference;

        return $this;
    }

    /**
     * Gets channelOrderReference
     * @return string
     */
    public function getChannelOrderReference()
    {
        return $this->container['channelOrderReference'];
    }

    /**
     * Sets channelOrderReference
     * @param string $channelOrderReference
     * @return $this
     */
    public function setChannelOrderReference($channelOrderReference)
    {
        if (!is_null($channelOrderReference) && (strlen($channelOrderReference) > 50)) {
            throw new \InvalidArgumentException('invalid length for $channelOrderReference when calling BackOrder., must be smaller than or equal to 50.');
        }
        if (!is_null($channelOrderReference) && (strlen($channelOrderReference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $channelOrderReference when calling BackOrder., must be bigger than or equal to 0.');
        }

        $this->container['channelOrderReference'] = $channelOrderReference;

        return $this;
    }

    /**
     * Gets lines
     * @return \ChannelEngine\ApiClient\Model\BackOrderLine[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     * @param \ChannelEngine\ApiClient\Model\BackOrderLine[] $lines
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ChannelEngine\ApiClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ChannelEngine\ApiClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


