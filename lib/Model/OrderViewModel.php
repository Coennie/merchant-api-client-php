<?php
/**
 * OrderViewModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * OrderViewModel Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrderViewModel implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'merchant_reference' => 'string',
        'phone' => 'string',
        'email' => 'string',
        'company_registration_no' => 'string',
        'vat_no' => 'string',
        'purchase_order_no' => 'string',
        'payment_method' => 'string',
        'shipping_costs_incl_vat' => 'double',
        'shipping_costs_vat' => 'double',
        'total_incl_vat' => 'double',
        'total_vat' => 'double',
        'original_shipping_costs_incl_vat' => 'double',
        'original_shipping_costs_vat' => 'double',
        'original_total_incl_vat' => 'double',
        'original_total_vat' => 'double',
        'currency_code' => 'string',
        'order_date' => '\DateTime',
        'status' => 'int',
        'acknowledged_date' => '\DateTime',
        'channel_name' => 'string',
        'can_ship_partial_order_lines' => 'bool',
        'channel_order_no' => 'string',
        'channel_customer_no' => 'string',
        'billing_address' => '\Swagger\Client\Model\Address',
        'max_vat_rate' => 'double',
        'extra_data' => 'map[string,string]',
        'shipping_address' => '\Swagger\Client\Model\Address',
        'lines' => '\Swagger\Client\Model\OrderLineViewModel[]'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'merchant_reference' => 'MerchantReference',
        'phone' => 'Phone',
        'email' => 'Email',
        'company_registration_no' => 'CompanyRegistrationNo',
        'vat_no' => 'VatNo',
        'purchase_order_no' => 'PurchaseOrderNo',
        'payment_method' => 'PaymentMethod',
        'shipping_costs_incl_vat' => 'ShippingCostsInclVat',
        'shipping_costs_vat' => 'ShippingCostsVat',
        'total_incl_vat' => 'TotalInclVat',
        'total_vat' => 'TotalVat',
        'original_shipping_costs_incl_vat' => 'OriginalShippingCostsInclVat',
        'original_shipping_costs_vat' => 'OriginalShippingCostsVat',
        'original_total_incl_vat' => 'OriginalTotalInclVat',
        'original_total_vat' => 'OriginalTotalVat',
        'currency_code' => 'CurrencyCode',
        'order_date' => 'OrderDate',
        'status' => 'Status',
        'acknowledged_date' => 'AcknowledgedDate',
        'channel_name' => 'ChannelName',
        'can_ship_partial_order_lines' => 'CanShipPartialOrderLines',
        'channel_order_no' => 'ChannelOrderNo',
        'channel_customer_no' => 'ChannelCustomerNo',
        'billing_address' => 'BillingAddress',
        'max_vat_rate' => 'MaxVatRate',
        'extra_data' => 'ExtraData',
        'shipping_address' => 'ShippingAddress',
        'lines' => 'Lines'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'merchant_reference' => 'setMerchantReference',
        'phone' => 'setPhone',
        'email' => 'setEmail',
        'company_registration_no' => 'setCompanyRegistrationNo',
        'vat_no' => 'setVatNo',
        'purchase_order_no' => 'setPurchaseOrderNo',
        'payment_method' => 'setPaymentMethod',
        'shipping_costs_incl_vat' => 'setShippingCostsInclVat',
        'shipping_costs_vat' => 'setShippingCostsVat',
        'total_incl_vat' => 'setTotalInclVat',
        'total_vat' => 'setTotalVat',
        'original_shipping_costs_incl_vat' => 'setOriginalShippingCostsInclVat',
        'original_shipping_costs_vat' => 'setOriginalShippingCostsVat',
        'original_total_incl_vat' => 'setOriginalTotalInclVat',
        'original_total_vat' => 'setOriginalTotalVat',
        'currency_code' => 'setCurrencyCode',
        'order_date' => 'setOrderDate',
        'status' => 'setStatus',
        'acknowledged_date' => 'setAcknowledgedDate',
        'channel_name' => 'setChannelName',
        'can_ship_partial_order_lines' => 'setCanShipPartialOrderLines',
        'channel_order_no' => 'setChannelOrderNo',
        'channel_customer_no' => 'setChannelCustomerNo',
        'billing_address' => 'setBillingAddress',
        'max_vat_rate' => 'setMaxVatRate',
        'extra_data' => 'setExtraData',
        'shipping_address' => 'setShippingAddress',
        'lines' => 'setLines'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'merchant_reference' => 'getMerchantReference',
        'phone' => 'getPhone',
        'email' => 'getEmail',
        'company_registration_no' => 'getCompanyRegistrationNo',
        'vat_no' => 'getVatNo',
        'purchase_order_no' => 'getPurchaseOrderNo',
        'payment_method' => 'getPaymentMethod',
        'shipping_costs_incl_vat' => 'getShippingCostsInclVat',
        'shipping_costs_vat' => 'getShippingCostsVat',
        'total_incl_vat' => 'getTotalInclVat',
        'total_vat' => 'getTotalVat',
        'original_shipping_costs_incl_vat' => 'getOriginalShippingCostsInclVat',
        'original_shipping_costs_vat' => 'getOriginalShippingCostsVat',
        'original_total_incl_vat' => 'getOriginalTotalInclVat',
        'original_total_vat' => 'getOriginalTotalVat',
        'currency_code' => 'getCurrencyCode',
        'order_date' => 'getOrderDate',
        'status' => 'getStatus',
        'acknowledged_date' => 'getAcknowledgedDate',
        'channel_name' => 'getChannelName',
        'can_ship_partial_order_lines' => 'getCanShipPartialOrderLines',
        'channel_order_no' => 'getChannelOrderNo',
        'channel_customer_no' => 'getChannelCustomerNo',
        'billing_address' => 'getBillingAddress',
        'max_vat_rate' => 'getMaxVatRate',
        'extra_data' => 'getExtraData',
        'shipping_address' => 'getShippingAddress',
        'lines' => 'getLines'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $merchant_reference 
      * @var string
      */
    protected $merchant_reference;
    
    /**
      * $phone 
      * @var string
      */
    protected $phone;
    
    /**
      * $email 
      * @var string
      */
    protected $email;
    
    /**
      * $company_registration_no 
      * @var string
      */
    protected $company_registration_no;
    
    /**
      * $vat_no 
      * @var string
      */
    protected $vat_no;
    
    /**
      * $purchase_order_no 
      * @var string
      */
    protected $purchase_order_no;
    
    /**
      * $payment_method 
      * @var string
      */
    protected $payment_method;
    
    /**
      * $shipping_costs_incl_vat The shipping fee including VAT\r\n            (in the tenant's base currency calculated using the exchange rate at the time of ordering).
      * @var double
      */
    protected $shipping_costs_incl_vat;
    
    /**
      * $shipping_costs_vat The total amount of VAT charged over the shipping fee\r\n            (in the tenant's base currency calculated using the exchange rate at the time of ordering).
      * @var double
      */
    protected $shipping_costs_vat;
    
    /**
      * $total_incl_vat The total value of the order including VAT\r\n            (in the tenant's base currency calculated using the exchange rate at the time of ordering).
      * @var double
      */
    protected $total_incl_vat;
    
    /**
      * $total_vat The total amount of VAT charged over the total value of te order\r\n            (in the tenant's base currency calculated using the exchange rate at the time of ordering).
      * @var double
      */
    protected $total_vat;
    
    /**
      * $original_shipping_costs_incl_vat The shipping fee including VAT\r\n            (in the currency in which the order was paid for).
      * @var double
      */
    protected $original_shipping_costs_incl_vat;
    
    /**
      * $original_shipping_costs_vat The total amount of VAT charged over the shipping fee\r\n            (in the currency in which the order was paid for).
      * @var double
      */
    protected $original_shipping_costs_vat;
    
    /**
      * $original_total_incl_vat The total value of the order including VAT\r\n            (in the currency in which the order was paid for).
      * @var double
      */
    protected $original_total_incl_vat;
    
    /**
      * $original_total_vat The total amount of VAT charged over the total value of te order\r\n            (in the currency in which the order was paid for).
      * @var double
      */
    protected $original_total_vat;
    
    /**
      * $currency_code 
      * @var string
      */
    protected $currency_code;
    
    /**
      * $order_date 
      * @var \DateTime
      */
    protected $order_date;
    
    /**
      * $status 
      * @var int
      */
    protected $status;
    
    /**
      * $acknowledged_date 
      * @var \DateTime
      */
    protected $acknowledged_date;
    
    /**
      * $channel_name Name of channel party (ie bol/vergelijk/amazon etc), used to make it easier to identify channels when using the api.
      * @var string
      */
    protected $channel_name;
    
    /**
      * $can_ship_partial_order_lines Indicates if the merchant can ship partial orderlines.
      * @var bool
      */
    protected $can_ship_partial_order_lines;
    
    /**
      * $channel_order_no 
      * @var string
      */
    protected $channel_order_no;
    
    /**
      * $channel_customer_no 
      * @var string
      */
    protected $channel_customer_no;
    
    /**
      * $billing_address 
      * @var \Swagger\Client\Model\Address
      */
    protected $billing_address;
    
    /**
      * $max_vat_rate 
      * @var double
      */
    protected $max_vat_rate;
    
    /**
      * $extra_data 
      * @var map[string,string]
      */
    protected $extra_data;
    
    /**
      * $shipping_address 
      * @var \Swagger\Client\Model\Address
      */
    protected $shipping_address;
    
    /**
      * $lines 
      * @var \Swagger\Client\Model\OrderLineViewModel[]
      */
    protected $lines;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->merchant_reference = $data["merchant_reference"];
            $this->phone = $data["phone"];
            $this->email = $data["email"];
            $this->company_registration_no = $data["company_registration_no"];
            $this->vat_no = $data["vat_no"];
            $this->purchase_order_no = $data["purchase_order_no"];
            $this->payment_method = $data["payment_method"];
            $this->shipping_costs_incl_vat = $data["shipping_costs_incl_vat"];
            $this->shipping_costs_vat = $data["shipping_costs_vat"];
            $this->total_incl_vat = $data["total_incl_vat"];
            $this->total_vat = $data["total_vat"];
            $this->original_shipping_costs_incl_vat = $data["original_shipping_costs_incl_vat"];
            $this->original_shipping_costs_vat = $data["original_shipping_costs_vat"];
            $this->original_total_incl_vat = $data["original_total_incl_vat"];
            $this->original_total_vat = $data["original_total_vat"];
            $this->currency_code = $data["currency_code"];
            $this->order_date = $data["order_date"];
            $this->status = $data["status"];
            $this->acknowledged_date = $data["acknowledged_date"];
            $this->channel_name = $data["channel_name"];
            $this->can_ship_partial_order_lines = $data["can_ship_partial_order_lines"];
            $this->channel_order_no = $data["channel_order_no"];
            $this->channel_customer_no = $data["channel_customer_no"];
            $this->billing_address = $data["billing_address"];
            $this->max_vat_rate = $data["max_vat_rate"];
            $this->extra_data = $data["extra_data"];
            $this->shipping_address = $data["shipping_address"];
            $this->lines = $data["lines"];
        }
    }
    
    /**
     * Gets merchant_reference
     * @return string
     */
    public function getMerchantReference()
    {
        return $this->merchant_reference;
    }
  
    /**
     * Sets merchant_reference
     * @param string $merchant_reference 
     * @return $this
     */
    public function setMerchantReference($merchant_reference)
    {
        
        $this->merchant_reference = $merchant_reference;
        return $this;
    }
    
    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->phone;
    }
  
    /**
     * Sets phone
     * @param string $phone 
     * @return $this
     */
    public function setPhone($phone)
    {
        
        $this->phone = $phone;
        return $this;
    }
    
    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }
  
    /**
     * Sets email
     * @param string $email 
     * @return $this
     */
    public function setEmail($email)
    {
        
        $this->email = $email;
        return $this;
    }
    
    /**
     * Gets company_registration_no
     * @return string
     */
    public function getCompanyRegistrationNo()
    {
        return $this->company_registration_no;
    }
  
    /**
     * Sets company_registration_no
     * @param string $company_registration_no 
     * @return $this
     */
    public function setCompanyRegistrationNo($company_registration_no)
    {
        
        $this->company_registration_no = $company_registration_no;
        return $this;
    }
    
    /**
     * Gets vat_no
     * @return string
     */
    public function getVatNo()
    {
        return $this->vat_no;
    }
  
    /**
     * Sets vat_no
     * @param string $vat_no 
     * @return $this
     */
    public function setVatNo($vat_no)
    {
        
        $this->vat_no = $vat_no;
        return $this;
    }
    
    /**
     * Gets purchase_order_no
     * @return string
     */
    public function getPurchaseOrderNo()
    {
        return $this->purchase_order_no;
    }
  
    /**
     * Sets purchase_order_no
     * @param string $purchase_order_no 
     * @return $this
     */
    public function setPurchaseOrderNo($purchase_order_no)
    {
        
        $this->purchase_order_no = $purchase_order_no;
        return $this;
    }
    
    /**
     * Gets payment_method
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->payment_method;
    }
  
    /**
     * Sets payment_method
     * @param string $payment_method 
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        
        $this->payment_method = $payment_method;
        return $this;
    }
    
    /**
     * Gets shipping_costs_incl_vat
     * @return double
     */
    public function getShippingCostsInclVat()
    {
        return $this->shipping_costs_incl_vat;
    }
  
    /**
     * Sets shipping_costs_incl_vat
     * @param double $shipping_costs_incl_vat The shipping fee including VAT\r\n            (in the tenant's base currency calculated using the exchange rate at the time of ordering).
     * @return $this
     */
    public function setShippingCostsInclVat($shipping_costs_incl_vat)
    {
        
        $this->shipping_costs_incl_vat = $shipping_costs_incl_vat;
        return $this;
    }
    
    /**
     * Gets shipping_costs_vat
     * @return double
     */
    public function getShippingCostsVat()
    {
        return $this->shipping_costs_vat;
    }
  
    /**
     * Sets shipping_costs_vat
     * @param double $shipping_costs_vat The total amount of VAT charged over the shipping fee\r\n            (in the tenant's base currency calculated using the exchange rate at the time of ordering).
     * @return $this
     */
    public function setShippingCostsVat($shipping_costs_vat)
    {
        
        $this->shipping_costs_vat = $shipping_costs_vat;
        return $this;
    }
    
    /**
     * Gets total_incl_vat
     * @return double
     */
    public function getTotalInclVat()
    {
        return $this->total_incl_vat;
    }
  
    /**
     * Sets total_incl_vat
     * @param double $total_incl_vat The total value of the order including VAT\r\n            (in the tenant's base currency calculated using the exchange rate at the time of ordering).
     * @return $this
     */
    public function setTotalInclVat($total_incl_vat)
    {
        
        $this->total_incl_vat = $total_incl_vat;
        return $this;
    }
    
    /**
     * Gets total_vat
     * @return double
     */
    public function getTotalVat()
    {
        return $this->total_vat;
    }
  
    /**
     * Sets total_vat
     * @param double $total_vat The total amount of VAT charged over the total value of te order\r\n            (in the tenant's base currency calculated using the exchange rate at the time of ordering).
     * @return $this
     */
    public function setTotalVat($total_vat)
    {
        
        $this->total_vat = $total_vat;
        return $this;
    }
    
    /**
     * Gets original_shipping_costs_incl_vat
     * @return double
     */
    public function getOriginalShippingCostsInclVat()
    {
        return $this->original_shipping_costs_incl_vat;
    }
  
    /**
     * Sets original_shipping_costs_incl_vat
     * @param double $original_shipping_costs_incl_vat The shipping fee including VAT\r\n            (in the currency in which the order was paid for).
     * @return $this
     */
    public function setOriginalShippingCostsInclVat($original_shipping_costs_incl_vat)
    {
        
        $this->original_shipping_costs_incl_vat = $original_shipping_costs_incl_vat;
        return $this;
    }
    
    /**
     * Gets original_shipping_costs_vat
     * @return double
     */
    public function getOriginalShippingCostsVat()
    {
        return $this->original_shipping_costs_vat;
    }
  
    /**
     * Sets original_shipping_costs_vat
     * @param double $original_shipping_costs_vat The total amount of VAT charged over the shipping fee\r\n            (in the currency in which the order was paid for).
     * @return $this
     */
    public function setOriginalShippingCostsVat($original_shipping_costs_vat)
    {
        
        $this->original_shipping_costs_vat = $original_shipping_costs_vat;
        return $this;
    }
    
    /**
     * Gets original_total_incl_vat
     * @return double
     */
    public function getOriginalTotalInclVat()
    {
        return $this->original_total_incl_vat;
    }
  
    /**
     * Sets original_total_incl_vat
     * @param double $original_total_incl_vat The total value of the order including VAT\r\n            (in the currency in which the order was paid for).
     * @return $this
     */
    public function setOriginalTotalInclVat($original_total_incl_vat)
    {
        
        $this->original_total_incl_vat = $original_total_incl_vat;
        return $this;
    }
    
    /**
     * Gets original_total_vat
     * @return double
     */
    public function getOriginalTotalVat()
    {
        return $this->original_total_vat;
    }
  
    /**
     * Sets original_total_vat
     * @param double $original_total_vat The total amount of VAT charged over the total value of te order\r\n            (in the currency in which the order was paid for).
     * @return $this
     */
    public function setOriginalTotalVat($original_total_vat)
    {
        
        $this->original_total_vat = $original_total_vat;
        return $this;
    }
    
    /**
     * Gets currency_code
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->currency_code;
    }
  
    /**
     * Sets currency_code
     * @param string $currency_code 
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        
        $this->currency_code = $currency_code;
        return $this;
    }
    
    /**
     * Gets order_date
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->order_date;
    }
  
    /**
     * Sets order_date
     * @param \DateTime $order_date 
     * @return $this
     */
    public function setOrderDate($order_date)
    {
        
        $this->order_date = $order_date;
        return $this;
    }
    
    /**
     * Gets status
     * @return int
     */
    public function getStatus()
    {
        return $this->status;
    }
  
    /**
     * Sets status
     * @param int $status 
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9");
        if (!in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'");
        }
        $this->status = $status;
        return $this;
    }
    
    /**
     * Gets acknowledged_date
     * @return \DateTime
     */
    public function getAcknowledgedDate()
    {
        return $this->acknowledged_date;
    }
  
    /**
     * Sets acknowledged_date
     * @param \DateTime $acknowledged_date 
     * @return $this
     */
    public function setAcknowledgedDate($acknowledged_date)
    {
        
        $this->acknowledged_date = $acknowledged_date;
        return $this;
    }
    
    /**
     * Gets channel_name
     * @return string
     */
    public function getChannelName()
    {
        return $this->channel_name;
    }
  
    /**
     * Sets channel_name
     * @param string $channel_name Name of channel party (ie bol/vergelijk/amazon etc), used to make it easier to identify channels when using the api.
     * @return $this
     */
    public function setChannelName($channel_name)
    {
        
        $this->channel_name = $channel_name;
        return $this;
    }
    
    /**
     * Gets can_ship_partial_order_lines
     * @return bool
     */
    public function getCanShipPartialOrderLines()
    {
        return $this->can_ship_partial_order_lines;
    }
  
    /**
     * Sets can_ship_partial_order_lines
     * @param bool $can_ship_partial_order_lines Indicates if the merchant can ship partial orderlines.
     * @return $this
     */
    public function setCanShipPartialOrderLines($can_ship_partial_order_lines)
    {
        
        $this->can_ship_partial_order_lines = $can_ship_partial_order_lines;
        return $this;
    }
    
    /**
     * Gets channel_order_no
     * @return string
     */
    public function getChannelOrderNo()
    {
        return $this->channel_order_no;
    }
  
    /**
     * Sets channel_order_no
     * @param string $channel_order_no 
     * @return $this
     */
    public function setChannelOrderNo($channel_order_no)
    {
        
        $this->channel_order_no = $channel_order_no;
        return $this;
    }
    
    /**
     * Gets channel_customer_no
     * @return string
     */
    public function getChannelCustomerNo()
    {
        return $this->channel_customer_no;
    }
  
    /**
     * Sets channel_customer_no
     * @param string $channel_customer_no 
     * @return $this
     */
    public function setChannelCustomerNo($channel_customer_no)
    {
        
        $this->channel_customer_no = $channel_customer_no;
        return $this;
    }
    
    /**
     * Gets billing_address
     * @return \Swagger\Client\Model\Address
     */
    public function getBillingAddress()
    {
        return $this->billing_address;
    }
  
    /**
     * Sets billing_address
     * @param \Swagger\Client\Model\Address $billing_address 
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        
        $this->billing_address = $billing_address;
        return $this;
    }
    
    /**
     * Gets max_vat_rate
     * @return double
     */
    public function getMaxVatRate()
    {
        return $this->max_vat_rate;
    }
  
    /**
     * Sets max_vat_rate
     * @param double $max_vat_rate 
     * @return $this
     */
    public function setMaxVatRate($max_vat_rate)
    {
        
        $this->max_vat_rate = $max_vat_rate;
        return $this;
    }
    
    /**
     * Gets extra_data
     * @return map[string,string]
     */
    public function getExtraData()
    {
        return $this->extra_data;
    }
  
    /**
     * Sets extra_data
     * @param map[string,string] $extra_data 
     * @return $this
     */
    public function setExtraData($extra_data)
    {
        
        $this->extra_data = $extra_data;
        return $this;
    }
    
    /**
     * Gets shipping_address
     * @return \Swagger\Client\Model\Address
     */
    public function getShippingAddress()
    {
        return $this->shipping_address;
    }
  
    /**
     * Sets shipping_address
     * @param \Swagger\Client\Model\Address $shipping_address 
     * @return $this
     */
    public function setShippingAddress($shipping_address)
    {
        
        $this->shipping_address = $shipping_address;
        return $this;
    }
    
    /**
     * Gets lines
     * @return \Swagger\Client\Model\OrderLineViewModel[]
     */
    public function getLines()
    {
        return $this->lines;
    }
  
    /**
     * Sets lines
     * @param \Swagger\Client\Model\OrderLineViewModel[] $lines 
     * @return $this
     */
    public function setLines($lines)
    {
        
        $this->lines = $lines;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
