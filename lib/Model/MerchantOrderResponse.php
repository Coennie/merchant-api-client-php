<?php
/**
 * MerchantOrderResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ChannelEngine API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * MerchantOrderResponse Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MerchantOrderResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'MerchantOrderResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'channel_name' => 'string',
        'can_ship_partial_order_lines' => 'bool',
        'lines' => '\Swagger\Client\Model\MerchantOrderLineResponse[]',
        'phone' => 'string',
        'email' => 'string',
        'company_registration_no' => 'string',
        'vat_no' => 'string',
        'payment_method' => 'string',
        'shipping_costs_incl_vat' => 'double',
        'currency_code' => 'string',
        'order_date' => '\DateTime',
        'channel_customer_reference' => 'string',
        'billing_address' => '\Swagger\Client\Model\EntitiesAddressModels',
        'shipping_address' => '\Swagger\Client\Model\EntitiesAddressModels',
        'extra_data' => 'map[string,string]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'channel_name' => 'ChannelName',
        'can_ship_partial_order_lines' => 'CanShipPartialOrderLines',
        'lines' => 'Lines',
        'phone' => 'Phone',
        'email' => 'Email',
        'company_registration_no' => 'CompanyRegistrationNo',
        'vat_no' => 'VatNo',
        'payment_method' => 'PaymentMethod',
        'shipping_costs_incl_vat' => 'ShippingCostsInclVat',
        'currency_code' => 'CurrencyCode',
        'order_date' => 'OrderDate',
        'channel_customer_reference' => 'ChannelCustomerReference',
        'billing_address' => 'BillingAddress',
        'shipping_address' => 'ShippingAddress',
        'extra_data' => 'ExtraData'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'channel_name' => 'setChannelName',
        'can_ship_partial_order_lines' => 'setCanShipPartialOrderLines',
        'lines' => 'setLines',
        'phone' => 'setPhone',
        'email' => 'setEmail',
        'company_registration_no' => 'setCompanyRegistrationNo',
        'vat_no' => 'setVatNo',
        'payment_method' => 'setPaymentMethod',
        'shipping_costs_incl_vat' => 'setShippingCostsInclVat',
        'currency_code' => 'setCurrencyCode',
        'order_date' => 'setOrderDate',
        'channel_customer_reference' => 'setChannelCustomerReference',
        'billing_address' => 'setBillingAddress',
        'shipping_address' => 'setShippingAddress',
        'extra_data' => 'setExtraData'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'channel_name' => 'getChannelName',
        'can_ship_partial_order_lines' => 'getCanShipPartialOrderLines',
        'lines' => 'getLines',
        'phone' => 'getPhone',
        'email' => 'getEmail',
        'company_registration_no' => 'getCompanyRegistrationNo',
        'vat_no' => 'getVatNo',
        'payment_method' => 'getPaymentMethod',
        'shipping_costs_incl_vat' => 'getShippingCostsInclVat',
        'currency_code' => 'getCurrencyCode',
        'order_date' => 'getOrderDate',
        'channel_customer_reference' => 'getChannelCustomerReference',
        'billing_address' => 'getBillingAddress',
        'shipping_address' => 'getShippingAddress',
        'extra_data' => 'getExtraData'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['channel_name'] = isset($data['channel_name']) ? $data['channel_name'] : null;
        $this->container['can_ship_partial_order_lines'] = isset($data['can_ship_partial_order_lines']) ? $data['can_ship_partial_order_lines'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['company_registration_no'] = isset($data['company_registration_no']) ? $data['company_registration_no'] : null;
        $this->container['vat_no'] = isset($data['vat_no']) ? $data['vat_no'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['shipping_costs_incl_vat'] = isset($data['shipping_costs_incl_vat']) ? $data['shipping_costs_incl_vat'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['order_date'] = isset($data['order_date']) ? $data['order_date'] : null;
        $this->container['channel_customer_reference'] = isset($data['channel_customer_reference']) ? $data['channel_customer_reference'] : null;
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
        $this->container['shipping_address'] = isset($data['shipping_address']) ? $data['shipping_address'] : null;
        $this->container['extra_data'] = isset($data['extra_data']) ? $data['extra_data'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['phone']) && (strlen($this->container['phone']) > 20)) {
            $invalid_properties[] = "invalid value for 'phone', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['phone']) && (strlen($this->container['phone']) < 0)) {
            $invalid_properties[] = "invalid value for 'phone', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['email'] === null) {
            $invalid_properties[] = "'email' can't be null";
        }
        if ((strlen($this->container['email']) > 250)) {
            $invalid_properties[] = "invalid value for 'email', the character length must be smaller than or equal to 250.";
        }

        if ((strlen($this->container['email']) < 0)) {
            $invalid_properties[] = "invalid value for 'email', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['company_registration_no']) && (strlen($this->container['company_registration_no']) > 50)) {
            $invalid_properties[] = "invalid value for 'company_registration_no', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['company_registration_no']) && (strlen($this->container['company_registration_no']) < 0)) {
            $invalid_properties[] = "invalid value for 'company_registration_no', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['vat_no']) && (strlen($this->container['vat_no']) > 50)) {
            $invalid_properties[] = "invalid value for 'vat_no', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['vat_no']) && (strlen($this->container['vat_no']) < 0)) {
            $invalid_properties[] = "invalid value for 'vat_no', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['payment_method'] === null) {
            $invalid_properties[] = "'payment_method' can't be null";
        }
        if ((strlen($this->container['payment_method']) > 50)) {
            $invalid_properties[] = "invalid value for 'payment_method', the character length must be smaller than or equal to 50.";
        }

        if ((strlen($this->container['payment_method']) < 0)) {
            $invalid_properties[] = "invalid value for 'payment_method', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['shipping_costs_incl_vat'] === null) {
            $invalid_properties[] = "'shipping_costs_incl_vat' can't be null";
        }
        if ($this->container['currency_code'] === null) {
            $invalid_properties[] = "'currency_code' can't be null";
        }
        if ($this->container['order_date'] === null) {
            $invalid_properties[] = "'order_date' can't be null";
        }
        if (!is_null($this->container['channel_customer_reference']) && (strlen($this->container['channel_customer_reference']) > 50)) {
            $invalid_properties[] = "invalid value for 'channel_customer_reference', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['channel_customer_reference']) && (strlen($this->container['channel_customer_reference']) < 0)) {
            $invalid_properties[] = "invalid value for 'channel_customer_reference', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['billing_address'] === null) {
            $invalid_properties[] = "'billing_address' can't be null";
        }
        if ($this->container['shipping_address'] === null) {
            $invalid_properties[] = "'shipping_address' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['phone']) > 20) {
            return false;
        }
        if (strlen($this->container['phone']) < 0) {
            return false;
        }
        if ($this->container['email'] === null) {
            return false;
        }
        if (strlen($this->container['email']) > 250) {
            return false;
        }
        if (strlen($this->container['email']) < 0) {
            return false;
        }
        if (strlen($this->container['company_registration_no']) > 50) {
            return false;
        }
        if (strlen($this->container['company_registration_no']) < 0) {
            return false;
        }
        if (strlen($this->container['vat_no']) > 50) {
            return false;
        }
        if (strlen($this->container['vat_no']) < 0) {
            return false;
        }
        if ($this->container['payment_method'] === null) {
            return false;
        }
        if (strlen($this->container['payment_method']) > 50) {
            return false;
        }
        if (strlen($this->container['payment_method']) < 0) {
            return false;
        }
        if ($this->container['shipping_costs_incl_vat'] === null) {
            return false;
        }
        if ($this->container['currency_code'] === null) {
            return false;
        }
        if ($this->container['order_date'] === null) {
            return false;
        }
        if (strlen($this->container['channel_customer_reference']) > 50) {
            return false;
        }
        if (strlen($this->container['channel_customer_reference']) < 0) {
            return false;
        }
        if ($this->container['billing_address'] === null) {
            return false;
        }
        if ($this->container['shipping_address'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id The unique identifier used by ChannelEngine. This identifier does  not have to be saved. It should only be used in a call to acknowledge the order.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets channel_name
     * @return string
     */
    public function getChannelName()
    {
        return $this->container['channel_name'];
    }

    /**
     * Sets channel_name
     * @param string $channel_name
     * @return $this
     */
    public function setChannelName($channel_name)
    {
        $this->container['channel_name'] = $channel_name;

        return $this;
    }

    /**
     * Gets can_ship_partial_order_lines
     * @return bool
     */
    public function getCanShipPartialOrderLines()
    {
        return $this->container['can_ship_partial_order_lines'];
    }

    /**
     * Sets can_ship_partial_order_lines
     * @param bool $can_ship_partial_order_lines
     * @return $this
     */
    public function setCanShipPartialOrderLines($can_ship_partial_order_lines)
    {
        $this->container['can_ship_partial_order_lines'] = $can_ship_partial_order_lines;

        return $this;
    }

    /**
     * Gets lines
     * @return \Swagger\Client\Model\MerchantOrderLineResponse[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     * @param \Swagger\Client\Model\MerchantOrderLineResponse[] $lines
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     * @param string $phone
     * @return $this
     */
    public function setPhone($phone)
    {
        if (!is_null($phone) && (strlen($phone) > 20)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling MerchantOrderResponse., must be smaller than or equal to 20.');
        }
        if (!is_null($phone) && (strlen($phone) < 0)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling MerchantOrderResponse., must be bigger than or equal to 0.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email
     * @return $this
     */
    public function setEmail($email)
    {
        if ((strlen($email) > 250)) {
            throw new \InvalidArgumentException('invalid length for $email when calling MerchantOrderResponse., must be smaller than or equal to 250.');
        }
        if ((strlen($email) < 0)) {
            throw new \InvalidArgumentException('invalid length for $email when calling MerchantOrderResponse., must be bigger than or equal to 0.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets company_registration_no
     * @return string
     */
    public function getCompanyRegistrationNo()
    {
        return $this->container['company_registration_no'];
    }

    /**
     * Sets company_registration_no
     * @param string $company_registration_no
     * @return $this
     */
    public function setCompanyRegistrationNo($company_registration_no)
    {
        if (!is_null($company_registration_no) && (strlen($company_registration_no) > 50)) {
            throw new \InvalidArgumentException('invalid length for $company_registration_no when calling MerchantOrderResponse., must be smaller than or equal to 50.');
        }
        if (!is_null($company_registration_no) && (strlen($company_registration_no) < 0)) {
            throw new \InvalidArgumentException('invalid length for $company_registration_no when calling MerchantOrderResponse., must be bigger than or equal to 0.');
        }

        $this->container['company_registration_no'] = $company_registration_no;

        return $this;
    }

    /**
     * Gets vat_no
     * @return string
     */
    public function getVatNo()
    {
        return $this->container['vat_no'];
    }

    /**
     * Sets vat_no
     * @param string $vat_no
     * @return $this
     */
    public function setVatNo($vat_no)
    {
        if (!is_null($vat_no) && (strlen($vat_no) > 50)) {
            throw new \InvalidArgumentException('invalid length for $vat_no when calling MerchantOrderResponse., must be smaller than or equal to 50.');
        }
        if (!is_null($vat_no) && (strlen($vat_no) < 0)) {
            throw new \InvalidArgumentException('invalid length for $vat_no when calling MerchantOrderResponse., must be bigger than or equal to 0.');
        }

        $this->container['vat_no'] = $vat_no;

        return $this;
    }

    /**
     * Gets payment_method
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     * @param string $payment_method
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        if ((strlen($payment_method) > 50)) {
            throw new \InvalidArgumentException('invalid length for $payment_method when calling MerchantOrderResponse., must be smaller than or equal to 50.');
        }
        if ((strlen($payment_method) < 0)) {
            throw new \InvalidArgumentException('invalid length for $payment_method when calling MerchantOrderResponse., must be bigger than or equal to 0.');
        }

        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets shipping_costs_incl_vat
     * @return double
     */
    public function getShippingCostsInclVat()
    {
        return $this->container['shipping_costs_incl_vat'];
    }

    /**
     * Sets shipping_costs_incl_vat
     * @param double $shipping_costs_incl_vat The shipping fee including VAT  (in the tenant's base currency calculated using the exchange rate at the time of ordering).
     * @return $this
     */
    public function setShippingCostsInclVat($shipping_costs_incl_vat)
    {
        $this->container['shipping_costs_incl_vat'] = $shipping_costs_incl_vat;

        return $this;
    }

    /**
     * Gets currency_code
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     * @param string $currency_code
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets order_date
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     * @param \DateTime $order_date
     * @return $this
     */
    public function setOrderDate($order_date)
    {
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets channel_customer_reference
     * @return string
     */
    public function getChannelCustomerReference()
    {
        return $this->container['channel_customer_reference'];
    }

    /**
     * Sets channel_customer_reference
     * @param string $channel_customer_reference
     * @return $this
     */
    public function setChannelCustomerReference($channel_customer_reference)
    {
        if (!is_null($channel_customer_reference) && (strlen($channel_customer_reference) > 50)) {
            throw new \InvalidArgumentException('invalid length for $channel_customer_reference when calling MerchantOrderResponse., must be smaller than or equal to 50.');
        }
        if (!is_null($channel_customer_reference) && (strlen($channel_customer_reference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $channel_customer_reference when calling MerchantOrderResponse., must be bigger than or equal to 0.');
        }

        $this->container['channel_customer_reference'] = $channel_customer_reference;

        return $this;
    }

    /**
     * Gets billing_address
     * @return \Swagger\Client\Model\EntitiesAddressModels
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     * @param \Swagger\Client\Model\EntitiesAddressModels $billing_address
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets shipping_address
     * @return \Swagger\Client\Model\EntitiesAddressModels
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     * @param \Swagger\Client\Model\EntitiesAddressModels $shipping_address
     * @return $this
     */
    public function setShippingAddress($shipping_address)
    {
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets extra_data
     * @return map[string,string]
     */
    public function getExtraData()
    {
        return $this->container['extra_data'];
    }

    /**
     * Sets extra_data
     * @param map[string,string] $extra_data
     * @return $this
     */
    public function setExtraData($extra_data)
    {
        $this->container['extra_data'] = $extra_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


