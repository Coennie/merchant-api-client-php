<?php
/**
 * ChannelShipmentResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ChannelEngine API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ChannelShipmentResponse Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ChannelShipmentResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ChannelShipmentResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'channel_order_reference' => 'string',
        'lines' => '\Swagger\Client\Model\ChannelShipmentLineResponse[]',
        'track_trace_no' => 'string',
        'track_trace_url' => 'string',
        'method' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'channel_order_reference' => 'ChannelOrderReference',
        'lines' => 'Lines',
        'track_trace_no' => 'TrackTraceNo',
        'track_trace_url' => 'TrackTraceUrl',
        'method' => 'Method'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'channel_order_reference' => 'setChannelOrderReference',
        'lines' => 'setLines',
        'track_trace_no' => 'setTrackTraceNo',
        'track_trace_url' => 'setTrackTraceUrl',
        'method' => 'setMethod'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'channel_order_reference' => 'getChannelOrderReference',
        'lines' => 'getLines',
        'track_trace_no' => 'getTrackTraceNo',
        'track_trace_url' => 'getTrackTraceUrl',
        'method' => 'getMethod'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channel_order_reference'] = isset($data['channel_order_reference']) ? $data['channel_order_reference'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['track_trace_no'] = isset($data['track_trace_no']) ? $data['track_trace_no'] : null;
        $this->container['track_trace_url'] = isset($data['track_trace_url']) ? $data['track_trace_url'] : null;
        $this->container['method'] = isset($data['method']) ? $data['method'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['channel_order_reference'] === null) {
            $invalid_properties[] = "'channel_order_reference' can't be null";
        }
        if ($this->container['lines'] === null) {
            $invalid_properties[] = "'lines' can't be null";
        }
        if (!is_null($this->container['track_trace_no']) && (strlen($this->container['track_trace_no']) > 50)) {
            $invalid_properties[] = "invalid value for 'track_trace_no', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['track_trace_no']) && (strlen($this->container['track_trace_no']) < 0)) {
            $invalid_properties[] = "invalid value for 'track_trace_no', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['track_trace_url']) && (strlen($this->container['track_trace_url']) > 250)) {
            $invalid_properties[] = "invalid value for 'track_trace_url', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['track_trace_url']) && (strlen($this->container['track_trace_url']) < 0)) {
            $invalid_properties[] = "invalid value for 'track_trace_url', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['method']) && (strlen($this->container['method']) > 50)) {
            $invalid_properties[] = "invalid value for 'method', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['method']) && (strlen($this->container['method']) < 0)) {
            $invalid_properties[] = "invalid value for 'method', the character length must be bigger than or equal to 0.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['channel_order_reference'] === null) {
            return false;
        }
        if ($this->container['lines'] === null) {
            return false;
        }
        if (strlen($this->container['track_trace_no']) > 50) {
            return false;
        }
        if (strlen($this->container['track_trace_no']) < 0) {
            return false;
        }
        if (strlen($this->container['track_trace_url']) > 250) {
            return false;
        }
        if (strlen($this->container['track_trace_url']) < 0) {
            return false;
        }
        if (strlen($this->container['method']) > 50) {
            return false;
        }
        if (strlen($this->container['method']) < 0) {
            return false;
        }
        return true;
    }


    /**
     * Gets channel_order_reference
     * @return string
     */
    public function getChannelOrderReference()
    {
        return $this->container['channel_order_reference'];
    }

    /**
     * Sets channel_order_reference
     * @param string $channel_order_reference
     * @return $this
     */
    public function setChannelOrderReference($channel_order_reference)
    {
        $this->container['channel_order_reference'] = $channel_order_reference;

        return $this;
    }

    /**
     * Gets lines
     * @return \Swagger\Client\Model\ChannelShipmentLineResponse[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     * @param \Swagger\Client\Model\ChannelShipmentLineResponse[] $lines
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets track_trace_no
     * @return string
     */
    public function getTrackTraceNo()
    {
        return $this->container['track_trace_no'];
    }

    /**
     * Sets track_trace_no
     * @param string $track_trace_no
     * @return $this
     */
    public function setTrackTraceNo($track_trace_no)
    {
        if (!is_null($track_trace_no) && (strlen($track_trace_no) > 50)) {
            throw new \InvalidArgumentException('invalid length for $track_trace_no when calling ChannelShipmentResponse., must be smaller than or equal to 50.');
        }
        if (!is_null($track_trace_no) && (strlen($track_trace_no) < 0)) {
            throw new \InvalidArgumentException('invalid length for $track_trace_no when calling ChannelShipmentResponse., must be bigger than or equal to 0.');
        }

        $this->container['track_trace_no'] = $track_trace_no;

        return $this;
    }

    /**
     * Gets track_trace_url
     * @return string
     */
    public function getTrackTraceUrl()
    {
        return $this->container['track_trace_url'];
    }

    /**
     * Sets track_trace_url
     * @param string $track_trace_url
     * @return $this
     */
    public function setTrackTraceUrl($track_trace_url)
    {
        if (!is_null($track_trace_url) && (strlen($track_trace_url) > 250)) {
            throw new \InvalidArgumentException('invalid length for $track_trace_url when calling ChannelShipmentResponse., must be smaller than or equal to 250.');
        }
        if (!is_null($track_trace_url) && (strlen($track_trace_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $track_trace_url when calling ChannelShipmentResponse., must be bigger than or equal to 0.');
        }

        $this->container['track_trace_url'] = $track_trace_url;

        return $this;
    }

    /**
     * Gets method
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     * @param string $method
     * @return $this
     */
    public function setMethod($method)
    {
        if (!is_null($method) && (strlen($method) > 50)) {
            throw new \InvalidArgumentException('invalid length for $method when calling ChannelShipmentResponse., must be smaller than or equal to 50.');
        }
        if (!is_null($method) && (strlen($method) < 0)) {
            throw new \InvalidArgumentException('invalid length for $method when calling ChannelShipmentResponse., must be bigger than or equal to 0.');
        }

        $this->container['method'] = $method;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


