<?php
/**
 * Address
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Address Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Address implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'gender' => 'int',
        'salutation' => 'string',
        'company_name' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'street_name' => 'string',
        'house_nr' => 'string',
        'house_nr_addition' => 'string',
        'zip_code' => 'string',
        'city' => 'string',
        'region' => 'string',
        'country_iso' => 'string',
        'is_new' => 'bool'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'gender' => 'Gender',
        'salutation' => 'Salutation',
        'company_name' => 'CompanyName',
        'first_name' => 'FirstName',
        'last_name' => 'LastName',
        'street_name' => 'StreetName',
        'house_nr' => 'HouseNr',
        'house_nr_addition' => 'HouseNrAddition',
        'zip_code' => 'ZipCode',
        'city' => 'City',
        'region' => 'Region',
        'country_iso' => 'CountryIso',
        'is_new' => 'IsNew'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'gender' => 'setGender',
        'salutation' => 'setSalutation',
        'company_name' => 'setCompanyName',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'street_name' => 'setStreetName',
        'house_nr' => 'setHouseNr',
        'house_nr_addition' => 'setHouseNrAddition',
        'zip_code' => 'setZipCode',
        'city' => 'setCity',
        'region' => 'setRegion',
        'country_iso' => 'setCountryIso',
        'is_new' => 'setIsNew'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'gender' => 'getGender',
        'salutation' => 'getSalutation',
        'company_name' => 'getCompanyName',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'street_name' => 'getStreetName',
        'house_nr' => 'getHouseNr',
        'house_nr_addition' => 'getHouseNrAddition',
        'zip_code' => 'getZipCode',
        'city' => 'getCity',
        'region' => 'getRegion',
        'country_iso' => 'getCountryIso',
        'is_new' => 'getIsNew'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $gender 
      * @var int
      */
    protected $gender;
    
    /**
      * $salutation 
      * @var string
      */
    protected $salutation;
    
    /**
      * $company_name 
      * @var string
      */
    protected $company_name;
    
    /**
      * $first_name 
      * @var string
      */
    protected $first_name;
    
    /**
      * $last_name 
      * @var string
      */
    protected $last_name;
    
    /**
      * $street_name 
      * @var string
      */
    protected $street_name;
    
    /**
      * $house_nr 
      * @var string
      */
    protected $house_nr;
    
    /**
      * $house_nr_addition 
      * @var string
      */
    protected $house_nr_addition;
    
    /**
      * $zip_code 
      * @var string
      */
    protected $zip_code;
    
    /**
      * $city 
      * @var string
      */
    protected $city;
    
    /**
      * $region 
      * @var string
      */
    protected $region;
    
    /**
      * $country_iso 
      * @var string
      */
    protected $country_iso;
    
    /**
      * $is_new 
      * @var bool
      */
    protected $is_new;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->gender = $data["gender"];
            $this->salutation = $data["salutation"];
            $this->company_name = $data["company_name"];
            $this->first_name = $data["first_name"];
            $this->last_name = $data["last_name"];
            $this->street_name = $data["street_name"];
            $this->house_nr = $data["house_nr"];
            $this->house_nr_addition = $data["house_nr_addition"];
            $this->zip_code = $data["zip_code"];
            $this->city = $data["city"];
            $this->region = $data["region"];
            $this->country_iso = $data["country_iso"];
            $this->is_new = $data["is_new"];
        }
    }
    
    /**
     * Gets gender
     * @return int
     */
    public function getGender()
    {
        return $this->gender;
    }
  
    /**
     * Sets gender
     * @param int $gender 
     * @return $this
     */
    public function setGender($gender)
    {
        $allowed_values = array("1", "2", "3");
        if (!in_array($gender, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'gender', must be one of '1', '2', '3'");
        }
        $this->gender = $gender;
        return $this;
    }
    
    /**
     * Gets salutation
     * @return string
     */
    public function getSalutation()
    {
        return $this->salutation;
    }
  
    /**
     * Sets salutation
     * @param string $salutation 
     * @return $this
     */
    public function setSalutation($salutation)
    {
        
        $this->salutation = $salutation;
        return $this;
    }
    
    /**
     * Gets company_name
     * @return string
     */
    public function getCompanyName()
    {
        return $this->company_name;
    }
  
    /**
     * Sets company_name
     * @param string $company_name 
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        
        $this->company_name = $company_name;
        return $this;
    }
    
    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->first_name;
    }
  
    /**
     * Sets first_name
     * @param string $first_name 
     * @return $this
     */
    public function setFirstName($first_name)
    {
        
        $this->first_name = $first_name;
        return $this;
    }
    
    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->last_name;
    }
  
    /**
     * Sets last_name
     * @param string $last_name 
     * @return $this
     */
    public function setLastName($last_name)
    {
        
        $this->last_name = $last_name;
        return $this;
    }
    
    /**
     * Gets street_name
     * @return string
     */
    public function getStreetName()
    {
        return $this->street_name;
    }
  
    /**
     * Sets street_name
     * @param string $street_name 
     * @return $this
     */
    public function setStreetName($street_name)
    {
        
        $this->street_name = $street_name;
        return $this;
    }
    
    /**
     * Gets house_nr
     * @return string
     */
    public function getHouseNr()
    {
        return $this->house_nr;
    }
  
    /**
     * Sets house_nr
     * @param string $house_nr 
     * @return $this
     */
    public function setHouseNr($house_nr)
    {
        
        $this->house_nr = $house_nr;
        return $this;
    }
    
    /**
     * Gets house_nr_addition
     * @return string
     */
    public function getHouseNrAddition()
    {
        return $this->house_nr_addition;
    }
  
    /**
     * Sets house_nr_addition
     * @param string $house_nr_addition 
     * @return $this
     */
    public function setHouseNrAddition($house_nr_addition)
    {
        
        $this->house_nr_addition = $house_nr_addition;
        return $this;
    }
    
    /**
     * Gets zip_code
     * @return string
     */
    public function getZipCode()
    {
        return $this->zip_code;
    }
  
    /**
     * Sets zip_code
     * @param string $zip_code 
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        
        $this->zip_code = $zip_code;
        return $this;
    }
    
    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->city;
    }
  
    /**
     * Sets city
     * @param string $city 
     * @return $this
     */
    public function setCity($city)
    {
        
        $this->city = $city;
        return $this;
    }
    
    /**
     * Gets region
     * @return string
     */
    public function getRegion()
    {
        return $this->region;
    }
  
    /**
     * Sets region
     * @param string $region 
     * @return $this
     */
    public function setRegion($region)
    {
        
        $this->region = $region;
        return $this;
    }
    
    /**
     * Gets country_iso
     * @return string
     */
    public function getCountryIso()
    {
        return $this->country_iso;
    }
  
    /**
     * Sets country_iso
     * @param string $country_iso 
     * @return $this
     */
    public function setCountryIso($country_iso)
    {
        
        $this->country_iso = $country_iso;
        return $this;
    }
    
    /**
     * Gets is_new
     * @return bool
     */
    public function getIsNew()
    {
        return $this->is_new;
    }
  
    /**
     * Sets is_new
     * @param bool $is_new 
     * @return $this
     */
    public function setIsNew($is_new)
    {
        
        $this->is_new = $is_new;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
