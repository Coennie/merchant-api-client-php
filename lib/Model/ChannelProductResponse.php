<?php
/**
 * ChannelProductResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ChannelEngine API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ChannelProductResponse Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ChannelProductResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ChannelProductResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'parent_channel_reference' => 'string',
        'mapped_fields' => 'map[string,string]',
        'name' => 'string',
        'description' => 'string',
        'brand' => 'string',
        'size' => 'string',
        'color' => 'string',
        'ean' => 'string',
        'manufacturer_product_number' => 'string',
        'stock' => 'int',
        'price' => 'double',
        'msrp' => 'double',
        'purchase_price' => 'double',
        'vat_rate_type' => 'string',
        'shipping_cost' => 'double',
        'shipping_time' => 'string',
        'url' => 'string',
        'image_url' => 'string',
        'category_trail' => 'string',
        'extra_data' => '\Swagger\Client\Model\ExtraDataItem[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'parent_channel_reference' => 'ParentChannelReference',
        'mapped_fields' => 'MappedFields',
        'name' => 'Name',
        'description' => 'Description',
        'brand' => 'Brand',
        'size' => 'Size',
        'color' => 'Color',
        'ean' => 'Ean',
        'manufacturer_product_number' => 'ManufacturerProductNumber',
        'stock' => 'Stock',
        'price' => 'Price',
        'msrp' => 'MSRP',
        'purchase_price' => 'PurchasePrice',
        'vat_rate_type' => 'VatRateType',
        'shipping_cost' => 'ShippingCost',
        'shipping_time' => 'ShippingTime',
        'url' => 'Url',
        'image_url' => 'ImageUrl',
        'category_trail' => 'CategoryTrail',
        'extra_data' => 'ExtraData'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'parent_channel_reference' => 'setParentChannelReference',
        'mapped_fields' => 'setMappedFields',
        'name' => 'setName',
        'description' => 'setDescription',
        'brand' => 'setBrand',
        'size' => 'setSize',
        'color' => 'setColor',
        'ean' => 'setEan',
        'manufacturer_product_number' => 'setManufacturerProductNumber',
        'stock' => 'setStock',
        'price' => 'setPrice',
        'msrp' => 'setMsrp',
        'purchase_price' => 'setPurchasePrice',
        'vat_rate_type' => 'setVatRateType',
        'shipping_cost' => 'setShippingCost',
        'shipping_time' => 'setShippingTime',
        'url' => 'setUrl',
        'image_url' => 'setImageUrl',
        'category_trail' => 'setCategoryTrail',
        'extra_data' => 'setExtraData'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'parent_channel_reference' => 'getParentChannelReference',
        'mapped_fields' => 'getMappedFields',
        'name' => 'getName',
        'description' => 'getDescription',
        'brand' => 'getBrand',
        'size' => 'getSize',
        'color' => 'getColor',
        'ean' => 'getEan',
        'manufacturer_product_number' => 'getManufacturerProductNumber',
        'stock' => 'getStock',
        'price' => 'getPrice',
        'msrp' => 'getMsrp',
        'purchase_price' => 'getPurchasePrice',
        'vat_rate_type' => 'getVatRateType',
        'shipping_cost' => 'getShippingCost',
        'shipping_time' => 'getShippingTime',
        'url' => 'getUrl',
        'image_url' => 'getImageUrl',
        'category_trail' => 'getCategoryTrail',
        'extra_data' => 'getExtraData'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const VAT_RATE_TYPE_STANDARD = 'STANDARD';
    const VAT_RATE_TYPE_REDUCED = 'REDUCED';
    const VAT_RATE_TYPE_SUPER_REDUCED = 'SUPER_REDUCED';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getVatRateTypeAllowableValues()
    {
        return [
            self::VAT_RATE_TYPE_STANDARD,
            self::VAT_RATE_TYPE_REDUCED,
            self::VAT_RATE_TYPE_SUPER_REDUCED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['parent_channel_reference'] = isset($data['parent_channel_reference']) ? $data['parent_channel_reference'] : null;
        $this->container['mapped_fields'] = isset($data['mapped_fields']) ? $data['mapped_fields'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['brand'] = isset($data['brand']) ? $data['brand'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['ean'] = isset($data['ean']) ? $data['ean'] : null;
        $this->container['manufacturer_product_number'] = isset($data['manufacturer_product_number']) ? $data['manufacturer_product_number'] : null;
        $this->container['stock'] = isset($data['stock']) ? $data['stock'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['msrp'] = isset($data['msrp']) ? $data['msrp'] : null;
        $this->container['purchase_price'] = isset($data['purchase_price']) ? $data['purchase_price'] : null;
        $this->container['vat_rate_type'] = isset($data['vat_rate_type']) ? $data['vat_rate_type'] : null;
        $this->container['shipping_cost'] = isset($data['shipping_cost']) ? $data['shipping_cost'] : null;
        $this->container['shipping_time'] = isset($data['shipping_time']) ? $data['shipping_time'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
        $this->container['category_trail'] = isset($data['category_trail']) ? $data['category_trail'] : null;
        $this->container['extra_data'] = isset($data['extra_data']) ? $data['extra_data'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["STANDARD", "REDUCED", "SUPER_REDUCED"];
        if (!in_array($this->container['vat_rate_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'vat_rate_type', must be one of 'STANDARD', 'REDUCED', 'SUPER_REDUCED'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["STANDARD", "REDUCED", "SUPER_REDUCED"];
        if (!in_array($this->container['vat_rate_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id An unique identifier which ChannelEngine uses to identify the product.  Needed in the call 'POST /v2/products/data'
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parent_channel_reference
     * @return string
     */
    public function getParentChannelReference()
    {
        return $this->container['parent_channel_reference'];
    }

    /**
     * Sets parent_channel_reference
     * @param string $parent_channel_reference
     * @return $this
     */
    public function setParentChannelReference($parent_channel_reference)
    {
        $this->container['parent_channel_reference'] = $parent_channel_reference;

        return $this;
    }

    /**
     * Gets mapped_fields
     * @return map[string,string]
     */
    public function getMappedFields()
    {
        return $this->container['mapped_fields'];
    }

    /**
     * Sets mapped_fields
     * @param map[string,string] $mapped_fields A channel can require certain fields to be available. The channel  can provide ChannelEngine with this fields after which the merchants  will be able to fill in this field using custom conditions in ChannelEngine.
     * @return $this
     */
    public function setMappedFields($mapped_fields)
    {
        $this->container['mapped_fields'] = $mapped_fields;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets brand
     * @return string
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     * @param string $brand
     * @return $this
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets size
     * @return string
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     * @param string $size
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets color
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     * @param string $color
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets ean
     * @return string
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     * @param string $ean
     * @return $this
     */
    public function setEan($ean)
    {
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets manufacturer_product_number
     * @return string
     */
    public function getManufacturerProductNumber()
    {
        return $this->container['manufacturer_product_number'];
    }

    /**
     * Sets manufacturer_product_number
     * @param string $manufacturer_product_number
     * @return $this
     */
    public function setManufacturerProductNumber($manufacturer_product_number)
    {
        $this->container['manufacturer_product_number'] = $manufacturer_product_number;

        return $this;
    }

    /**
     * Gets stock
     * @return int
     */
    public function getStock()
    {
        return $this->container['stock'];
    }

    /**
     * Sets stock
     * @param int $stock
     * @return $this
     */
    public function setStock($stock)
    {
        $this->container['stock'] = $stock;

        return $this;
    }

    /**
     * Gets price
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param double $price Price, including VAT.
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets msrp
     * @return double
     */
    public function getMsrp()
    {
        return $this->container['msrp'];
    }

    /**
     * Sets msrp
     * @param double $msrp Manufacturer's suggested retail price
     * @return $this
     */
    public function setMsrp($msrp)
    {
        $this->container['msrp'] = $msrp;

        return $this;
    }

    /**
     * Gets purchase_price
     * @return double
     */
    public function getPurchasePrice()
    {
        return $this->container['purchase_price'];
    }

    /**
     * Sets purchase_price
     * @param double $purchase_price
     * @return $this
     */
    public function setPurchasePrice($purchase_price)
    {
        $this->container['purchase_price'] = $purchase_price;

        return $this;
    }

    /**
     * Gets vat_rate_type
     * @return string
     */
    public function getVatRateType()
    {
        return $this->container['vat_rate_type'];
    }

    /**
     * Sets vat_rate_type
     * @param string $vat_rate_type The type of VAT which applies to this product.  See: http://ec.europa.eu/taxation_customs/taxation/vat/topics/rates_en.htm
     * @return $this
     */
    public function setVatRateType($vat_rate_type)
    {
        $allowed_values = array('STANDARD', 'REDUCED', 'SUPER_REDUCED');
        if (!is_null($vat_rate_type) && (!in_array($vat_rate_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'vat_rate_type', must be one of 'STANDARD', 'REDUCED', 'SUPER_REDUCED'");
        }
        $this->container['vat_rate_type'] = $vat_rate_type;

        return $this;
    }

    /**
     * Gets shipping_cost
     * @return double
     */
    public function getShippingCost()
    {
        return $this->container['shipping_cost'];
    }

    /**
     * Sets shipping_cost
     * @param double $shipping_cost
     * @return $this
     */
    public function setShippingCost($shipping_cost)
    {
        $this->container['shipping_cost'] = $shipping_cost;

        return $this;
    }

    /**
     * Gets shipping_time
     * @return string
     */
    public function getShippingTime()
    {
        return $this->container['shipping_time'];
    }

    /**
     * Sets shipping_time
     * @param string $shipping_time A textual representation of the shippingtime.  For example, in Dutch: 'Op werkdagen voor 22:00 uur besteld, morgen in huis'
     * @return $this
     */
    public function setShippingTime($shipping_time)
    {
        $this->container['shipping_time'] = $shipping_time;

        return $this;
    }

    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url A URL pointing to the merchant's webpage  which displays this product.
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets image_url
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     * @param string $image_url A URL at which an image of this product  can be found.
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets category_trail
     * @return string
     */
    public function getCategoryTrail()
    {
        return $this->container['category_trail'];
    }

    /**
     * Sets category_trail
     * @param string $category_trail The category to which this product belongs.  Please supply this field in the following format:  'maincategory &gt; category &gt; subcategory'  For example:  'vehicles &gt; bikes &gt; mountainbike'
     * @return $this
     */
    public function setCategoryTrail($category_trail)
    {
        $this->container['category_trail'] = $category_trail;

        return $this;
    }

    /**
     * Gets extra_data
     * @return \Swagger\Client\Model\ExtraDataItem[]
     */
    public function getExtraData()
    {
        return $this->container['extra_data'];
    }

    /**
     * Sets extra_data
     * @param \Swagger\Client\Model\ExtraDataItem[] $extra_data An optional list of key-value pairs containing  extra data about this product. This data can be  sent to channels or used for filtering products.
     * @return $this
     */
    public function setExtraData($extra_data)
    {
        $this->container['extra_data'] = $extra_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


