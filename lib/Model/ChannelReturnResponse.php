<?php
/**
 * ChannelReturnResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ChannelEngine API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ChannelReturnResponse Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ChannelReturnResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ChannelReturnResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'channel_reference' => 'string',
        'channel_order_reference' => 'string',
        'lines' => '\Swagger\Client\Model\ChannelReturnLineResponse[]',
        'reason' => 'string',
        'customer_comment' => 'string',
        'merchant_comment' => 'string',
        'refund_incl_vat' => 'double',
        'refund_excl_vat' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'channel_reference' => 'ChannelReference',
        'channel_order_reference' => 'ChannelOrderReference',
        'lines' => 'Lines',
        'reason' => 'Reason',
        'customer_comment' => 'CustomerComment',
        'merchant_comment' => 'MerchantComment',
        'refund_incl_vat' => 'RefundInclVat',
        'refund_excl_vat' => 'RefundExclVat'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'channel_reference' => 'setChannelReference',
        'channel_order_reference' => 'setChannelOrderReference',
        'lines' => 'setLines',
        'reason' => 'setReason',
        'customer_comment' => 'setCustomerComment',
        'merchant_comment' => 'setMerchantComment',
        'refund_incl_vat' => 'setRefundInclVat',
        'refund_excl_vat' => 'setRefundExclVat'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'channel_reference' => 'getChannelReference',
        'channel_order_reference' => 'getChannelOrderReference',
        'lines' => 'getLines',
        'reason' => 'getReason',
        'customer_comment' => 'getCustomerComment',
        'merchant_comment' => 'getMerchantComment',
        'refund_incl_vat' => 'getRefundInclVat',
        'refund_excl_vat' => 'getRefundExclVat'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const REASON_PRODUCT_DEFECT = 'PRODUCT_DEFECT';
    const REASON_PRODUCT_UNSATISFACTORY = 'PRODUCT_UNSATISFACTORY';
    const REASON_REFUSED = 'REFUSED';
    const REASON_REFUSED_DAMAGED = 'REFUSED_DAMAGED';
    const REASON_WRONG_ADDRESS = 'WRONG_ADDRESS';
    const REASON_NOT_COLLECTED = 'NOT_COLLECTED';
    const REASON_OTHER = 'OTHER';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getReasonAllowableValues()
    {
        return [
            self::REASON_PRODUCT_DEFECT,
            self::REASON_PRODUCT_UNSATISFACTORY,
            self::REASON_REFUSED,
            self::REASON_REFUSED_DAMAGED,
            self::REASON_WRONG_ADDRESS,
            self::REASON_NOT_COLLECTED,
            self::REASON_OTHER,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channel_reference'] = isset($data['channel_reference']) ? $data['channel_reference'] : null;
        $this->container['channel_order_reference'] = isset($data['channel_order_reference']) ? $data['channel_order_reference'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['customer_comment'] = isset($data['customer_comment']) ? $data['customer_comment'] : null;
        $this->container['merchant_comment'] = isset($data['merchant_comment']) ? $data['merchant_comment'] : null;
        $this->container['refund_incl_vat'] = isset($data['refund_incl_vat']) ? $data['refund_incl_vat'] : null;
        $this->container['refund_excl_vat'] = isset($data['refund_excl_vat']) ? $data['refund_excl_vat'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['channel_reference'] === null) {
            $invalid_properties[] = "'channel_reference' can't be null";
        }
        if ($this->container['channel_order_reference'] === null) {
            $invalid_properties[] = "'channel_order_reference' can't be null";
        }
        if ($this->container['lines'] === null) {
            $invalid_properties[] = "'lines' can't be null";
        }
        $allowed_values = ["PRODUCT_DEFECT", "PRODUCT_UNSATISFACTORY", "REFUSED", "REFUSED_DAMAGED", "WRONG_ADDRESS", "NOT_COLLECTED", "OTHER"];
        if (!in_array($this->container['reason'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'reason', must be one of 'PRODUCT_DEFECT', 'PRODUCT_UNSATISFACTORY', 'REFUSED', 'REFUSED_DAMAGED', 'WRONG_ADDRESS', 'NOT_COLLECTED', 'OTHER'.";
        }

        if (!is_null($this->container['customer_comment']) && (strlen($this->container['customer_comment']) > 4001)) {
            $invalid_properties[] = "invalid value for 'customer_comment', the character length must be smaller than or equal to 4001.";
        }

        if (!is_null($this->container['customer_comment']) && (strlen($this->container['customer_comment']) < 0)) {
            $invalid_properties[] = "invalid value for 'customer_comment', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['merchant_comment']) && (strlen($this->container['merchant_comment']) > 4001)) {
            $invalid_properties[] = "invalid value for 'merchant_comment', the character length must be smaller than or equal to 4001.";
        }

        if (!is_null($this->container['merchant_comment']) && (strlen($this->container['merchant_comment']) < 0)) {
            $invalid_properties[] = "invalid value for 'merchant_comment', the character length must be bigger than or equal to 0.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['channel_reference'] === null) {
            return false;
        }
        if ($this->container['channel_order_reference'] === null) {
            return false;
        }
        if ($this->container['lines'] === null) {
            return false;
        }
        $allowed_values = ["PRODUCT_DEFECT", "PRODUCT_UNSATISFACTORY", "REFUSED", "REFUSED_DAMAGED", "WRONG_ADDRESS", "NOT_COLLECTED", "OTHER"];
        if (!in_array($this->container['reason'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['customer_comment']) > 4001) {
            return false;
        }
        if (strlen($this->container['customer_comment']) < 0) {
            return false;
        }
        if (strlen($this->container['merchant_comment']) > 4001) {
            return false;
        }
        if (strlen($this->container['merchant_comment']) < 0) {
            return false;
        }
        return true;
    }


    /**
     * Gets channel_reference
     * @return string
     */
    public function getChannelReference()
    {
        return $this->container['channel_reference'];
    }

    /**
     * Sets channel_reference
     * @param string $channel_reference
     * @return $this
     */
    public function setChannelReference($channel_reference)
    {
        $this->container['channel_reference'] = $channel_reference;

        return $this;
    }

    /**
     * Gets channel_order_reference
     * @return string
     */
    public function getChannelOrderReference()
    {
        return $this->container['channel_order_reference'];
    }

    /**
     * Sets channel_order_reference
     * @param string $channel_order_reference
     * @return $this
     */
    public function setChannelOrderReference($channel_order_reference)
    {
        $this->container['channel_order_reference'] = $channel_order_reference;

        return $this;
    }

    /**
     * Gets lines
     * @return \Swagger\Client\Model\ChannelReturnLineResponse[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     * @param \Swagger\Client\Model\ChannelReturnLineResponse[] $lines
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets reason
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     * @param string $reason
     * @return $this
     */
    public function setReason($reason)
    {
        $allowed_values = array('PRODUCT_DEFECT', 'PRODUCT_UNSATISFACTORY', 'REFUSED', 'REFUSED_DAMAGED', 'WRONG_ADDRESS', 'NOT_COLLECTED', 'OTHER');
        if (!is_null($reason) && (!in_array($reason, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'reason', must be one of 'PRODUCT_DEFECT', 'PRODUCT_UNSATISFACTORY', 'REFUSED', 'REFUSED_DAMAGED', 'WRONG_ADDRESS', 'NOT_COLLECTED', 'OTHER'");
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets customer_comment
     * @return string
     */
    public function getCustomerComment()
    {
        return $this->container['customer_comment'];
    }

    /**
     * Sets customer_comment
     * @param string $customer_comment
     * @return $this
     */
    public function setCustomerComment($customer_comment)
    {
        if (!is_null($customer_comment) && (strlen($customer_comment) > 4001)) {
            throw new \InvalidArgumentException('invalid length for $customer_comment when calling ChannelReturnResponse., must be smaller than or equal to 4001.');
        }
        if (!is_null($customer_comment) && (strlen($customer_comment) < 0)) {
            throw new \InvalidArgumentException('invalid length for $customer_comment when calling ChannelReturnResponse., must be bigger than or equal to 0.');
        }

        $this->container['customer_comment'] = $customer_comment;

        return $this;
    }

    /**
     * Gets merchant_comment
     * @return string
     */
    public function getMerchantComment()
    {
        return $this->container['merchant_comment'];
    }

    /**
     * Sets merchant_comment
     * @param string $merchant_comment
     * @return $this
     */
    public function setMerchantComment($merchant_comment)
    {
        if (!is_null($merchant_comment) && (strlen($merchant_comment) > 4001)) {
            throw new \InvalidArgumentException('invalid length for $merchant_comment when calling ChannelReturnResponse., must be smaller than or equal to 4001.');
        }
        if (!is_null($merchant_comment) && (strlen($merchant_comment) < 0)) {
            throw new \InvalidArgumentException('invalid length for $merchant_comment when calling ChannelReturnResponse., must be bigger than or equal to 0.');
        }

        $this->container['merchant_comment'] = $merchant_comment;

        return $this;
    }

    /**
     * Gets refund_incl_vat
     * @return double
     */
    public function getRefundInclVat()
    {
        return $this->container['refund_incl_vat'];
    }

    /**
     * Sets refund_incl_vat
     * @param double $refund_incl_vat
     * @return $this
     */
    public function setRefundInclVat($refund_incl_vat)
    {
        $this->container['refund_incl_vat'] = $refund_incl_vat;

        return $this;
    }

    /**
     * Gets refund_excl_vat
     * @return double
     */
    public function getRefundExclVat()
    {
        return $this->container['refund_excl_vat'];
    }

    /**
     * Sets refund_excl_vat
     * @param double $refund_excl_vat
     * @return $this
     */
    public function setRefundExclVat($refund_excl_vat)
    {
        $this->container['refund_excl_vat'] = $refund_excl_vat;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


